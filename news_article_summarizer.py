# -*- coding: utf-8 -*-
"""News Article Summarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e5nTm7kUiNNOy_56srxcnispJNULT57m
"""

!pip install transformers torch

from transformers import pipeline
summarizer=pipeline("summarization",model="Falconsai/text_summarization") #load summarizer pipeline
text="""The recent Grape Stomp 5K at Lincoln Way Vineyards raised critical support for PAWS for the Wayne County Dog Shelter.The event, now in its third year, saw approximately 165 registered runners, up from about 120 in its first year, according to a community announcement.
Vineyard owner Jim Borton, who adopted a dog from the shelter about 15 years ago, said he considers his winery the perfect place to host the run.Everything just sort of came together to make it possible for us to host this event and support PAWS, Borton said in the announcement.
Visitors to the vineyard are always welcome to bring their pets to the patio, the picnic and the upstairs event space when it is open-everywhere where we don't have food handling activities."""

summary=summarizer(text,max_length=50,min_length=20,do_sample=True)
print("Original Text:\n",text)
print("\nSummary:\n",summary[0]['summary_text'])

from transformers import pipeline
summarizer=pipeline("summarization",model="facebook/bart-large-cnn") #load summarizer pipeline
text="""The recent Grape Stomp 5K at Lincoln Way Vineyards raised critical support for PAWS for the Wayne County Dog Shelter.The event, now in its third year, saw approximately 165 registered runners, up from about 120 in its first year, according to a community announcement.
Vineyard owner Jim Borton, who adopted a dog from the shelter about 15 years ago, said he considers his winery the perfect place to host the run.Everything just sort of came together to make it possible for us to host this event and support PAWS, Borton said in the announcement.
Visitors to the vineyard are always welcome to bring their pets to the patio, the picnic and the upstairs event space when it is open-everywhere where we don't have food handling activities."""

summary=summarizer(text,max_length=50,min_length=20,do_sample=True)
print("Original Text:\n",text)
print("\nSummary:\n",summary[0]['summary_text'])

!pip install newspaper3k lxml[html5] lxml_html_clean

from newspaper import Article
 url = "https://timesofindia.indiatimes.com/city/delhi/hold-your-breath-annual-punishment-begins/articleshow/124745867.cms"
 article = Article(url)
 article.download()
 article.parse()
 print("Original Article text (First 700 chars):\n")
 print(article.text[:700])
 summary=summarizer(article.text,max_length=50,min_length=20,do_sample=False)
 print("\nSummary:\n",summary[0]['summary_text'])

def summarize_text_or_url(input_text=None, input_url=None):
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    if input_url:
        article = Article(input_url)
        article.download()
        article.parse()
        text = article.text
    elif input_text:
        text = input_text
    else:
        return "Please provide text or URL."

    summarized = summarizer(text, max_length=150, min_length=50, do_sample=False)
    return summarized[0]['summary_text']

# Example usage
result = summarize_text_or_url(input_text="Machine learning is a branch of artificial intelligence...")
print(result)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# from flask import Flask, render_template, request
# from transformers import pipeline
# from newspaper import Article
# 
# # Initialize Flask app
# app = Flask(__name__)
# 
# # Load summarization model once
# summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
# 
# @app.route("/")
# def home():
#     # Main route with a link to summarizer
#     return """
#     <h1>üß† Text Summarizer App</h1>
#     <p>Go to the <a href='/summarize'>Summarizer Page</a></p>
#     <p>Or visit the <a href='/welcome'>Welcome Page</a></p>
#     """
# 
# @app.route("/welcome")
# def welcome():
#     # Loads welcome page from template
#     return render_template("welcome.html")
# 
# @app.route("/summarize", methods=["GET", "POST"])
# def summarize():
#     summary = None
#     original_text = None
#     error = None
# 
#     if request.method == "POST":
#         input_text = request.form.get("input_text")
#         input_url = request.form.get("input_url")
# 
#         try:
#             if input_url:
#                 article = Article(input_url)
#                 article.download()
#                 article.parse()
#                 text = article.text
#             elif input_text:
#                 text = input_text
#             else:
#                 error = "Please enter text or a URL to summarize."
#                 return render_template("summarize.html", summary=None, error=error)
# 
#             result = summarizer(text, max_length=150, min_length=50, do_sample=False)
#             summary = result[0]['summary_text']
#             original_text = input_text or input_url
# 
#         except Exception as e:
#             error = f"‚ö†Ô∏è Error: {str(e)}"
# 
#     return render_template("summarize.html", summary=summary, error=error, original_text=original_text)
# 
# if __name__ == "__main__":
#     app.run(port=8000)
#

!mkdir -p templates

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/welcome.html
# <!DOCTYPE html>
# <html>
# <head>
#     <title>Welcome Page</title>
# </head>
# <body style="font-family:Arial; text-align:center;">
#     <h1>üéâ Welcome to Flask!</h1>
#     <p>This page is rendered using an HTML template.</p>
#     <p><a href="/">‚¨Ö Back to Home</a></p>
# </body>
# </html>
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/summarize.html
# <!DOCTYPE html>
# <html>
# <head>
#     <title>Text Summarizer</title>
#     <style>
#         body {
#             font-family: 'Segoe UI', sans-serif;
#             background: linear-gradient(to right, #8EC5FC, #E0C3FC);
#             display: flex;
#             flex-direction: column;
#             align-items: center;
#             padding: 30px;
#         }
#         .container {
#             background: white;
#             border-radius: 15px;
#             padding: 25px;
#             width: 70%;
#             max-width: 700px;
#             box-shadow: 0 5px 15px rgba(0,0,0,0.2);
#         }
#         input, textarea {
#             width: 100%;
#             padding: 10px;
#             border-radius: 10px;
#             border: 1px solid #ccc;
#             margin-top: 10px;
#             margin-bottom: 15px;
#             resize: none;
#         }
#         button {
#             background: #6C63FF;
#             color: white;
#             padding: 10px 20px;
#             border-radius: 8px;
#             border: none;
#             cursor: pointer;
#             transition: 0.3s;
#         }
#         button:hover {
#             background: #4e47d6;
#         }
#         .summary {
#             background: #f7f7f7;
#             padding: 15px;
#             border-radius: 10px;
#             margin-top: 20px;
#         }
#         .error {
#             color: red;
#             margin-bottom: 10px;
#         }
#     </style>
# </head>
# <body>
# <div class="container">
#     <h2>üß† Text Summarizer</h2>
#     <form method="POST">
#         <label>Enter Article URL (optional):</label>
#         <input type="text" name="input_url" placeholder="Paste article URL here...">
# 
#         <label>Or Enter Text:</label>
#         <textarea name="input_text" rows="8" placeholder="Paste text here..."></textarea>
# 
#         <button type="submit">Summarize</button>
#     </form>
# 
#     {% if error %}
#         <div class="error">{{ error }}</div>
#     {% endif %}
# 
#     {% if summary %}
#         <div class="summary">
#             <h3>Summary:</h3>
#             <p>{{ summary }}</p>
#         </div>
#     {% endif %}
# </div>
# </body>
# </html>
#

pip install flask pyngrok transformers newspaper3k torch --quiet

!pkill -f flask || echo "No Flask process found"
!pkill -f ngrok || echo "No ngrok process found"

!sleep 3

!lsof -i :8000 || echo "Port 8000 is free ‚úÖ"

!kill 21259

!lsof -i :8000 || echo "‚úÖ Port 8000 is now free!"

!nohup python app.py > flask.log 2>&1 &

from pyngrok import ngrok, conf

# use your real authtoken here
conf.get_default().auth_token = "345QO4rgr00ARzL1WTwD44ltomA_7zUWjh8GD1cJtLAhbqMuA"

public_url = ngrok.connect(8000)
print("üåç Public URL:", public_url)

!sleep 3 && tail -n 20 flask.log